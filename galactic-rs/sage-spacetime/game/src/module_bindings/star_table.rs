// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::sage_star_type::SageStar;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `star`.
///
/// Obtain a handle from the [`StarTableAccess::star`] method on [`super::RemoteTables`],
/// like `ctx.db.star()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.star().on_insert(...)`.
pub struct StarTableHandle<'ctx> {
    imp: __sdk::TableHandle<SageStar>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `star`.
///
/// Implemented for [`super::RemoteTables`].
pub trait StarTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`StarTableHandle`], which mediates access to the table `star`.
    fn star(&self) -> StarTableHandle<'_>;
}

impl StarTableAccess for super::RemoteTables {
    fn star(&self) -> StarTableHandle<'_> {
        StarTableHandle {
            imp: self.imp.get_table::<SageStar>("star"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct StarInsertCallbackId(__sdk::CallbackId);
pub struct StarDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for StarTableHandle<'ctx> {
    type Row = SageStar;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = SageStar> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = StarInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> StarInsertCallbackId {
        StarInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: StarInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = StarDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> StarDeleteCallbackId {
        StarDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: StarDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<SageStar>("star");
    _table.add_unique_constraint::<String>("pubkey", |row| &row.pubkey);
}
pub struct StarUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for StarTableHandle<'ctx> {
    type UpdateCallbackId = StarUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> StarUpdateCallbackId {
        StarUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: StarUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<SageStar>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<SageStar>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `pubkey` unique index on the table `star`,
/// which allows point queries on the field of the same name
/// via the [`StarPubkeyUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.star().pubkey().find(...)`.
pub struct StarPubkeyUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<SageStar, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> StarTableHandle<'ctx> {
    /// Get a handle on the `pubkey` unique index on the table `star`.
    pub fn pubkey(&self) -> StarPubkeyUnique<'ctx> {
        StarPubkeyUnique {
            imp: self.imp.get_unique_constraint::<String>("pubkey"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> StarPubkeyUnique<'ctx> {
    /// Find the subscribed row whose `pubkey` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<SageStar> {
        self.imp.find(col_val)
    }
}
