// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::fleet_state_type::FleetState;
use super::sage_fleet_state_type::SageFleetState;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `fleet_state`.
///
/// Obtain a handle from the [`FleetStateTableAccess::fleet_state`] method on [`super::RemoteTables`],
/// like `ctx.db.fleet_state()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.fleet_state().on_insert(...)`.
pub struct FleetStateTableHandle<'ctx> {
    imp: __sdk::TableHandle<SageFleetState>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `fleet_state`.
///
/// Implemented for [`super::RemoteTables`].
pub trait FleetStateTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`FleetStateTableHandle`], which mediates access to the table `fleet_state`.
    fn fleet_state(&self) -> FleetStateTableHandle<'_>;
}

impl FleetStateTableAccess for super::RemoteTables {
    fn fleet_state(&self) -> FleetStateTableHandle<'_> {
        FleetStateTableHandle {
            imp: self.imp.get_table::<SageFleetState>("fleet_state"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct FleetStateInsertCallbackId(__sdk::CallbackId);
pub struct FleetStateDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for FleetStateTableHandle<'ctx> {
    type Row = SageFleetState;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = SageFleetState> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = FleetStateInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> FleetStateInsertCallbackId {
        FleetStateInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: FleetStateInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = FleetStateDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> FleetStateDeleteCallbackId {
        FleetStateDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: FleetStateDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<SageFleetState>("fleet_state");
    _table.add_unique_constraint::<String>("pubkey", |row| &row.pubkey);
}
pub struct FleetStateUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for FleetStateTableHandle<'ctx> {
    type UpdateCallbackId = FleetStateUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> FleetStateUpdateCallbackId {
        FleetStateUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: FleetStateUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<SageFleetState>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<SageFleetState>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `pubkey` unique index on the table `fleet_state`,
/// which allows point queries on the field of the same name
/// via the [`FleetStatePubkeyUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.fleet_state().pubkey().find(...)`.
pub struct FleetStatePubkeyUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<SageFleetState, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> FleetStateTableHandle<'ctx> {
    /// Get a handle on the `pubkey` unique index on the table `fleet_state`.
    pub fn pubkey(&self) -> FleetStatePubkeyUnique<'ctx> {
        FleetStatePubkeyUnique {
            imp: self.imp.get_unique_constraint::<String>("pubkey"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> FleetStatePubkeyUnique<'ctx> {
    /// Find the subscribed row whose `pubkey` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<SageFleetState> {
        self.imp.find(col_val)
    }
}
