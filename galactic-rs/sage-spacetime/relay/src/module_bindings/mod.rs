// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

pub mod client_table;
pub mod client_type;
pub mod config_table;
pub mod config_type;
pub mod debug_reducer;
pub mod fleet_pos_table;
pub mod fleet_state_table;
pub mod fleet_state_type;
pub mod fleet_table;
pub mod identity_connected_reducer;
pub mod identity_disconnected_reducer;
pub mod idle_type;
pub mod logged_out_client_table;
pub mod message_table;
pub mod message_type;
pub mod move_subwarp_type;
pub mod move_warp_type;
pub mod player_viewport_table;
pub mod player_viewport_type;
pub mod sage_fleet_pos_type;
pub mod sage_fleet_state_type;
pub mod sage_fleet_type;
pub mod sage_star_type;
pub mod send_message_reducer;
pub mod set_player_viewport_reducer;
pub mod star_table;
pub mod update_config_slot_reducer;
pub mod update_fleet_pos_reducer;
pub mod update_fleet_reducer;
pub mod update_fleet_state_reducer;
pub mod update_star_reducer;

pub use client_table::*;
pub use client_type::Client;
pub use config_table::*;
pub use config_type::Config;
pub use debug_reducer::{DebugCallbackId, debug, set_flags_for_debug};
pub use fleet_pos_table::*;
pub use fleet_state_table::*;
pub use fleet_state_type::FleetState;
pub use fleet_table::*;
pub use identity_connected_reducer::{
    IdentityConnectedCallbackId, identity_connected, set_flags_for_identity_connected,
};
pub use identity_disconnected_reducer::{
    IdentityDisconnectedCallbackId, identity_disconnected, set_flags_for_identity_disconnected,
};
pub use idle_type::Idle;
pub use logged_out_client_table::*;
pub use message_table::*;
pub use message_type::Message;
pub use move_subwarp_type::MoveSubwarp;
pub use move_warp_type::MoveWarp;
pub use player_viewport_table::*;
pub use player_viewport_type::PlayerViewport;
pub use sage_fleet_pos_type::SageFleetPos;
pub use sage_fleet_state_type::SageFleetState;
pub use sage_fleet_type::SageFleet;
pub use sage_star_type::SageStar;
pub use send_message_reducer::{SendMessageCallbackId, send_message, set_flags_for_send_message};
pub use set_player_viewport_reducer::{
    SetPlayerViewportCallbackId, set_flags_for_set_player_viewport, set_player_viewport,
};
pub use star_table::*;
pub use update_config_slot_reducer::{
    UpdateConfigSlotCallbackId, set_flags_for_update_config_slot, update_config_slot,
};
pub use update_fleet_pos_reducer::{
    UpdateFleetPosCallbackId, set_flags_for_update_fleet_pos, update_fleet_pos,
};
pub use update_fleet_reducer::{UpdateFleetCallbackId, set_flags_for_update_fleet, update_fleet};
pub use update_fleet_state_reducer::{
    UpdateFleetStateCallbackId, set_flags_for_update_fleet_state, update_fleet_state,
};
pub use update_star_reducer::{UpdateStarCallbackId, set_flags_for_update_star, update_star};

#[derive(Clone, PartialEq, Debug)]

/// One of the reducers defined by this module.
///
/// Contained within a [`__sdk::ReducerEvent`] in [`EventContext`]s for reducer events
/// to indicate which reducer caused the event.

pub enum Reducer {
    Debug,
    IdentityConnected,
    IdentityDisconnected,
    SendMessage { text: String },
    SetPlayerViewport { x: i32, y: i32, size: i32 },
    UpdateConfigSlot { slot: u64 },
    UpdateFleet { fleet: SageFleet },
    UpdateFleetPos { pos: SageFleetPos },
    UpdateFleetState { state: SageFleetState },
    UpdateStar { star: SageStar },
}

impl __sdk::InModule for Reducer {
    type Module = RemoteModule;
}

impl __sdk::Reducer for Reducer {
    fn reducer_name(&self) -> &'static str {
        match self {
            Reducer::Debug => "debug",
            Reducer::IdentityConnected => "identity_connected",
            Reducer::IdentityDisconnected => "identity_disconnected",
            Reducer::SendMessage { .. } => "send_message",
            Reducer::SetPlayerViewport { .. } => "set_player_viewport",
            Reducer::UpdateConfigSlot { .. } => "update_config_slot",
            Reducer::UpdateFleet { .. } => "update_fleet",
            Reducer::UpdateFleetPos { .. } => "update_fleet_pos",
            Reducer::UpdateFleetState { .. } => "update_fleet_state",
            Reducer::UpdateStar { .. } => "update_star",
        }
    }
}
impl TryFrom<__ws::ReducerCallInfo<__ws::BsatnFormat>> for Reducer {
    type Error = __sdk::Error;
    fn try_from(value: __ws::ReducerCallInfo<__ws::BsatnFormat>) -> __sdk::Result<Self> {
        match &value.reducer_name[..] {
            "debug" => Ok(__sdk::parse_reducer_args::<debug_reducer::DebugArgs>(
                "debug",
                &value.args,
            )?
            .into()),
            "identity_connected" => Ok(__sdk::parse_reducer_args::<
                identity_connected_reducer::IdentityConnectedArgs,
            >("identity_connected", &value.args)?
            .into()),
            "identity_disconnected" => Ok(__sdk::parse_reducer_args::<
                identity_disconnected_reducer::IdentityDisconnectedArgs,
            >("identity_disconnected", &value.args)?
            .into()),
            "send_message" => Ok(
                __sdk::parse_reducer_args::<send_message_reducer::SendMessageArgs>(
                    "send_message",
                    &value.args,
                )?
                .into(),
            ),
            "set_player_viewport" => Ok(__sdk::parse_reducer_args::<
                set_player_viewport_reducer::SetPlayerViewportArgs,
            >("set_player_viewport", &value.args)?
            .into()),
            "update_config_slot" => Ok(__sdk::parse_reducer_args::<
                update_config_slot_reducer::UpdateConfigSlotArgs,
            >("update_config_slot", &value.args)?
            .into()),
            "update_fleet" => Ok(
                __sdk::parse_reducer_args::<update_fleet_reducer::UpdateFleetArgs>(
                    "update_fleet",
                    &value.args,
                )?
                .into(),
            ),
            "update_fleet_pos" => Ok(__sdk::parse_reducer_args::<
                update_fleet_pos_reducer::UpdateFleetPosArgs,
            >("update_fleet_pos", &value.args)?
            .into()),
            "update_fleet_state" => Ok(__sdk::parse_reducer_args::<
                update_fleet_state_reducer::UpdateFleetStateArgs,
            >("update_fleet_state", &value.args)?
            .into()),
            "update_star" => Ok(
                __sdk::parse_reducer_args::<update_star_reducer::UpdateStarArgs>(
                    "update_star",
                    &value.args,
                )?
                .into(),
            ),
            unknown => {
                Err(
                    __sdk::InternalError::unknown_name("reducer", unknown, "ReducerCallInfo")
                        .into(),
                )
            }
        }
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct DbUpdate {
    client: __sdk::TableUpdate<Client>,
    config: __sdk::TableUpdate<Config>,
    fleet: __sdk::TableUpdate<SageFleet>,
    fleet_pos: __sdk::TableUpdate<SageFleetPos>,
    fleet_state: __sdk::TableUpdate<SageFleetState>,
    logged_out_client: __sdk::TableUpdate<Client>,
    message: __sdk::TableUpdate<Message>,
    player_viewport: __sdk::TableUpdate<PlayerViewport>,
    star: __sdk::TableUpdate<SageStar>,
}

impl TryFrom<__ws::DatabaseUpdate<__ws::BsatnFormat>> for DbUpdate {
    type Error = __sdk::Error;
    fn try_from(raw: __ws::DatabaseUpdate<__ws::BsatnFormat>) -> Result<Self, Self::Error> {
        let mut db_update = DbUpdate::default();
        for table_update in raw.tables {
            match &table_update.table_name[..] {
                "client" => db_update.client = client_table::parse_table_update(table_update)?,
                "config" => db_update.config = config_table::parse_table_update(table_update)?,
                "fleet" => db_update.fleet = fleet_table::parse_table_update(table_update)?,
                "fleet_pos" => {
                    db_update.fleet_pos = fleet_pos_table::parse_table_update(table_update)?
                }
                "fleet_state" => {
                    db_update.fleet_state = fleet_state_table::parse_table_update(table_update)?
                }
                "logged_out_client" => {
                    db_update.logged_out_client =
                        logged_out_client_table::parse_table_update(table_update)?
                }
                "message" => db_update.message = message_table::parse_table_update(table_update)?,
                "player_viewport" => {
                    db_update.player_viewport =
                        player_viewport_table::parse_table_update(table_update)?
                }
                "star" => db_update.star = star_table::parse_table_update(table_update)?,

                unknown => {
                    return Err(__sdk::InternalError::unknown_name(
                        "table",
                        unknown,
                        "DatabaseUpdate",
                    )
                    .into());
                }
            }
        }
        Ok(db_update)
    }
}

impl __sdk::InModule for DbUpdate {
    type Module = RemoteModule;
}

impl __sdk::DbUpdate for DbUpdate {
    fn apply_to_client_cache(
        &self,
        cache: &mut __sdk::ClientCache<RemoteModule>,
    ) -> AppliedDiff<'_> {
        let mut diff = AppliedDiff::default();

        diff.client = cache
            .apply_diff_to_table::<Client>("client", &self.client)
            .with_updates_by_pk(|row| &row.id);
        diff.config = cache
            .apply_diff_to_table::<Config>("config", &self.config)
            .with_updates_by_pk(|row| &row.id);
        diff.fleet = cache
            .apply_diff_to_table::<SageFleet>("fleet", &self.fleet)
            .with_updates_by_pk(|row| &row.pubkey);
        diff.fleet_pos = cache
            .apply_diff_to_table::<SageFleetPos>("fleet_pos", &self.fleet_pos)
            .with_updates_by_pk(|row| &row.pubkey);
        diff.fleet_state = cache
            .apply_diff_to_table::<SageFleetState>("fleet_state", &self.fleet_state)
            .with_updates_by_pk(|row| &row.pubkey);
        diff.logged_out_client = cache
            .apply_diff_to_table::<Client>("logged_out_client", &self.logged_out_client)
            .with_updates_by_pk(|row| &row.id);
        diff.message = cache.apply_diff_to_table::<Message>("message", &self.message);
        diff.player_viewport = cache
            .apply_diff_to_table::<PlayerViewport>("player_viewport", &self.player_viewport)
            .with_updates_by_pk(|row| &row.id);
        diff.star = cache
            .apply_diff_to_table::<SageStar>("star", &self.star)
            .with_updates_by_pk(|row| &row.pubkey);

        diff
    }
}

#[derive(Default)]
#[allow(non_snake_case)]
#[doc(hidden)]
pub struct AppliedDiff<'r> {
    client: __sdk::TableAppliedDiff<'r, Client>,
    config: __sdk::TableAppliedDiff<'r, Config>,
    fleet: __sdk::TableAppliedDiff<'r, SageFleet>,
    fleet_pos: __sdk::TableAppliedDiff<'r, SageFleetPos>,
    fleet_state: __sdk::TableAppliedDiff<'r, SageFleetState>,
    logged_out_client: __sdk::TableAppliedDiff<'r, Client>,
    message: __sdk::TableAppliedDiff<'r, Message>,
    player_viewport: __sdk::TableAppliedDiff<'r, PlayerViewport>,
    star: __sdk::TableAppliedDiff<'r, SageStar>,
}

impl __sdk::InModule for AppliedDiff<'_> {
    type Module = RemoteModule;
}

impl<'r> __sdk::AppliedDiff<'r> for AppliedDiff<'r> {
    fn invoke_row_callbacks(
        &self,
        event: &EventContext,
        callbacks: &mut __sdk::DbCallbacks<RemoteModule>,
    ) {
        callbacks.invoke_table_row_callbacks::<Client>("client", &self.client, event);
        callbacks.invoke_table_row_callbacks::<Config>("config", &self.config, event);
        callbacks.invoke_table_row_callbacks::<SageFleet>("fleet", &self.fleet, event);
        callbacks.invoke_table_row_callbacks::<SageFleetPos>("fleet_pos", &self.fleet_pos, event);
        callbacks.invoke_table_row_callbacks::<SageFleetState>(
            "fleet_state",
            &self.fleet_state,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Client>(
            "logged_out_client",
            &self.logged_out_client,
            event,
        );
        callbacks.invoke_table_row_callbacks::<Message>("message", &self.message, event);
        callbacks.invoke_table_row_callbacks::<PlayerViewport>(
            "player_viewport",
            &self.player_viewport,
            event,
        );
        callbacks.invoke_table_row_callbacks::<SageStar>("star", &self.star, event);
    }
}

#[doc(hidden)]
pub struct RemoteModule;

impl __sdk::InModule for RemoteModule {
    type Module = Self;
}

/// The `reducers` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
pub struct RemoteReducers {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteReducers {
    type Module = RemoteModule;
}

#[doc(hidden)]
/// The `set_reducer_flags` field of [`DbConnection`],
/// with methods provided by extension traits for each reducer defined by the module.
/// Each method sets the flags for the reducer with the same name.
///
/// This type is currently unstable and may be removed without a major version bump.
pub struct SetReducerFlags {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for SetReducerFlags {
    type Module = RemoteModule;
}

/// The `db` field of [`EventContext`] and [`DbConnection`],
/// with methods provided by extension traits for each table defined by the module.
pub struct RemoteTables {
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for RemoteTables {
    type Module = RemoteModule;
}

/// A connection to a remote module, including a materialized view of a subset of the database.
///
/// Connect to a remote module by calling [`DbConnection::builder`]
/// and using the [`__sdk::DbConnectionBuilder`] builder-pattern constructor.
///
/// You must explicitly advance the connection by calling any one of:
///
/// - [`DbConnection::frame_tick`].
/// - [`DbConnection::run_threaded`].
/// - [`DbConnection::run_async`].
/// - [`DbConnection::advance_one_message`].
/// - [`DbConnection::advance_one_message_blocking`].
/// - [`DbConnection::advance_one_message_async`].
///
/// Which of these methods you should call depends on the specific needs of your application,
/// but you must call one of them, or else the connection will never progress.
pub struct DbConnection {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    #[doc(hidden)]
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,

    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::InModule for DbConnection {
    type Module = RemoteModule;
}

impl __sdk::DbContext for DbConnection {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl DbConnection {
    /// Builder-pattern constructor for a connection to a remote module.
    ///
    /// See [`__sdk::DbConnectionBuilder`] for required and optional configuration for the new connection.
    pub fn builder() -> __sdk::DbConnectionBuilder<RemoteModule> {
        __sdk::DbConnectionBuilder::new()
    }

    /// If any WebSocket messages are waiting, process one of them.
    ///
    /// Returns `true` if a message was processed, or `false` if the queue is empty.
    /// Callers should invoke this message in a loop until it returns `false`
    /// or for as much time is available to process messages.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::frame_tick`] each frame
    /// to fully exhaust the queue whenever time is available.
    pub fn advance_one_message(&self) -> __sdk::Result<bool> {
        self.imp.advance_one_message()
    }

    /// Process one WebSocket message, potentially blocking the current thread until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_threaded`] to spawn a thread
    /// which advances the connection automatically.
    pub fn advance_one_message_blocking(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_blocking()
    }

    /// Process one WebSocket message, `await`ing until one is received.
    ///
    /// Returns an error if the connection is disconnected.
    /// If the disconnection in question was normal,
    ///  i.e. the result of a call to [`__sdk::DbContext::disconnect`],
    /// the returned error will be downcastable to [`__sdk::DisconnectedError`].
    ///
    /// This is a low-level primitive exposed for power users who need significant control over scheduling.
    /// Most applications should call [`Self::run_async`] to run an `async` loop
    /// which advances the connection when polled.
    pub async fn advance_one_message_async(&self) -> __sdk::Result<()> {
        self.imp.advance_one_message_async().await
    }

    /// Process all WebSocket messages waiting in the queue,
    /// then return without `await`ing or blocking the current thread.
    pub fn frame_tick(&self) -> __sdk::Result<()> {
        self.imp.frame_tick()
    }

    /// Spawn a thread which processes WebSocket messages as they are received.
    pub fn run_threaded(&self) -> std::thread::JoinHandle<()> {
        self.imp.run_threaded()
    }

    /// Run an `async` loop which processes WebSocket messages when polled.
    pub async fn run_async(&self) -> __sdk::Result<()> {
        self.imp.run_async().await
    }
}

impl __sdk::DbConnection for DbConnection {
    fn new(imp: __sdk::DbContextImpl<RemoteModule>) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

/// A handle on a subscribed query.
// TODO: Document this better after implementing the new subscription API.
#[derive(Clone)]
pub struct SubscriptionHandle {
    imp: __sdk::SubscriptionHandleImpl<RemoteModule>,
}

impl __sdk::InModule for SubscriptionHandle {
    type Module = RemoteModule;
}

impl __sdk::SubscriptionHandle for SubscriptionHandle {
    fn new(imp: __sdk::SubscriptionHandleImpl<RemoteModule>) -> Self {
        Self { imp }
    }

    /// Returns true if this subscription has been terminated due to an unsubscribe call or an error.
    fn is_ended(&self) -> bool {
        self.imp.is_ended()
    }

    /// Returns true if this subscription has been applied and has not yet been unsubscribed.
    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    /// Unsubscribe from the query controlled by this `SubscriptionHandle`,
    /// then run `on_end` when its rows are removed from the client cache.
    fn unsubscribe_then(self, on_end: __sdk::OnEndedCallback<RemoteModule>) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(Some(on_end))
    }

    fn unsubscribe(self) -> __sdk::Result<()> {
        self.imp.unsubscribe_then(None)
    }
}

/// Alias trait for a [`__sdk::DbContext`] connected to this module,
/// with that trait's associated types bounded to this module's concrete types.
///
/// Users can use this trait as a boundary on definitions which should accept
/// either a [`DbConnection`] or an [`EventContext`] and operate on either.
pub trait RemoteDbContext:
    __sdk::DbContext<
        DbView = RemoteTables,
        Reducers = RemoteReducers,
        SetReducerFlags = SetReducerFlags,
        SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
    >
{
}
impl<
    Ctx: __sdk::DbContext<
            DbView = RemoteTables,
            Reducers = RemoteReducers,
            SetReducerFlags = SetReducerFlags,
            SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>,
        >,
> RemoteDbContext for Ctx
{
}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Event`],
/// passed to [`__sdk::Table::on_insert`], [`__sdk::Table::on_delete`] and [`__sdk::TableWithPrimaryKey::on_update`] callbacks.
pub struct EventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::Event<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for EventContext {
    type Event = __sdk::Event<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for EventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for EventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::EventContext for EventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::ReducerEvent`],
/// passed to on-reducer callbacks.
pub struct ReducerEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: __sdk::ReducerEvent<Reducer>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ReducerEventContext {
    type Event = __sdk::ReducerEvent<Reducer>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ReducerEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ReducerEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ReducerEventContext for ReducerEventContext {}

/// An [`__sdk::DbContext`] passed to [`__sdk::SubscriptionBuilder::on_applied`] and [`SubscriptionHandle::unsubscribe_then`] callbacks.
pub struct SubscriptionEventContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for SubscriptionEventContext {
    type Event = ();
    fn event(&self) -> &Self::Event {
        &()
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, _event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            imp,
        }
    }
}

impl __sdk::InModule for SubscriptionEventContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for SubscriptionEventContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::SubscriptionEventContext for SubscriptionEventContext {}

/// An [`__sdk::DbContext`] augmented with a [`__sdk::Error`],
/// passed to [`__sdk::DbConnectionBuilder::on_disconnect`], [`__sdk::DbConnectionBuilder::on_connect_error`] and [`__sdk::SubscriptionBuilder::on_error`] callbacks.
pub struct ErrorContext {
    /// Access to tables defined by the module via extension traits implemented for [`RemoteTables`].
    pub db: RemoteTables,
    /// Access to reducers defined by the module via extension traits implemented for [`RemoteReducers`].
    pub reducers: RemoteReducers,
    /// Access to setting the call-flags of each reducer defined for each reducer defined by the module
    /// via extension traits implemented for [`SetReducerFlags`].
    ///
    /// This type is currently unstable and may be removed without a major version bump.
    pub set_reducer_flags: SetReducerFlags,
    /// The event which caused these callbacks to run.
    pub event: Option<__sdk::Error>,
    imp: __sdk::DbContextImpl<RemoteModule>,
}

impl __sdk::AbstractEventContext for ErrorContext {
    type Event = Option<__sdk::Error>;
    fn event(&self) -> &Self::Event {
        &self.event
    }
    fn new(imp: __sdk::DbContextImpl<RemoteModule>, event: Self::Event) -> Self {
        Self {
            db: RemoteTables { imp: imp.clone() },
            reducers: RemoteReducers { imp: imp.clone() },
            set_reducer_flags: SetReducerFlags { imp: imp.clone() },
            event,
            imp,
        }
    }
}

impl __sdk::InModule for ErrorContext {
    type Module = RemoteModule;
}

impl __sdk::DbContext for ErrorContext {
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;

    fn db(&self) -> &Self::DbView {
        &self.db
    }
    fn reducers(&self) -> &Self::Reducers {
        &self.reducers
    }
    fn set_reducer_flags(&self) -> &Self::SetReducerFlags {
        &self.set_reducer_flags
    }

    fn is_active(&self) -> bool {
        self.imp.is_active()
    }

    fn disconnect(&self) -> __sdk::Result<()> {
        self.imp.disconnect()
    }

    type SubscriptionBuilder = __sdk::SubscriptionBuilder<RemoteModule>;

    fn subscription_builder(&self) -> Self::SubscriptionBuilder {
        __sdk::SubscriptionBuilder::new(&self.imp)
    }

    fn try_identity(&self) -> Option<__sdk::Identity> {
        self.imp.try_identity()
    }
    fn connection_id(&self) -> __sdk::ConnectionId {
        self.imp.connection_id()
    }
}

impl __sdk::ErrorContext for ErrorContext {}

impl __sdk::SpacetimeModule for RemoteModule {
    type DbConnection = DbConnection;
    type EventContext = EventContext;
    type ReducerEventContext = ReducerEventContext;
    type SubscriptionEventContext = SubscriptionEventContext;
    type ErrorContext = ErrorContext;
    type Reducer = Reducer;
    type DbView = RemoteTables;
    type Reducers = RemoteReducers;
    type SetReducerFlags = SetReducerFlags;
    type DbUpdate = DbUpdate;
    type AppliedDiff<'r> = AppliedDiff<'r>;
    type SubscriptionHandle = SubscriptionHandle;

    fn register_tables(client_cache: &mut __sdk::ClientCache<Self>) {
        client_table::register_table(client_cache);
        config_table::register_table(client_cache);
        fleet_table::register_table(client_cache);
        fleet_pos_table::register_table(client_cache);
        fleet_state_table::register_table(client_cache);
        logged_out_client_table::register_table(client_cache);
        message_table::register_table(client_cache);
        player_viewport_table::register_table(client_cache);
        star_table::register_table(client_cache);
    }
}
